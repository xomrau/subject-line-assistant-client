{"version":3,"sources":["components/Form.js","components/About.js","components/Header.js","components/Footer.js","components/Search.js","components/EmojiList.js","logic/utf8Encoder.js","logic/slEncoder.js","logic/copyClipboard.js","App.js","serviceWorker.js","index.js"],"names":["DecodedForm","props","className","htmlFor","type","id","name","value","onChange","EncodedForm","onClick","copy","readOnly","Form","onSubmit","this","submit","change","userInput","submitValue","React","Component","About","href","Header","src","alt","Footer","Search","input","filterChange","placeholder","EmojiList","arrayList","activePage","items","slice","itemPerPage","error","message","isLoaded","map","item","itemList","key","slug","character","role","aria-label","utf8Encoder","str","encodeURIComponent","slEncoder","length","subjectLine","closing","replace","copyClipboard","copyText","document","getElementById","select","setSelectionRange","execCommand","console","log","App","numberOfItemPerPage","state","filterInput","handleChange","bind","handleFilterChange","handleClick","handleEmojiClick","handlePaginationChange","e","setState","target","preventDefault","innerText","toLowerCase","setTimeout","data","filteredData","filter","unicodeName","includes","Pagination","totalPages","Math","ceil","onPageChange","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.efda754a.chunk.js","sourcesContent":["import React from 'react';\n\nconst DecodedForm = function(props) {\n    return <div className=\"flex col\">\n        <label className=\"pb-10 pt-20\" htmlFor=\"decode\">UTF-8-decoded subject line</label>\n        <input type=\"text\" id=\"decode\" name=\"decode\" value={props.value} onChange={props.onChange}/>\n    </div>;\n}\nconst EncodedForm = function(props) {\n    return <div className=\"flex col\">\n        <label className=\"pb-10\" htmlFor=\"encode\">UTF-8-encoded subject line</label>\n        <input type=\"text\" id=\"encode\" name=\"encode\" value={props.value} onClick={props.copy} readOnly/>\n    </div>;\n}\nexport default class Form extends React.Component {\n    render() {\n        return <div className=\"form view pt-20 pb-20\">\n            <form onSubmit={this.props.submit} className=\"flex col\">\n                <DecodedForm onChange={this.props.change} \n                value={this.props.userInput} />\n                <input className=\"submitButton mt-10 mb-10\" type=\"submit\" value=\"Encode It!\"/>\n                <EncodedForm value={this.props.submitValue} copy={this.props.copy}/>\n            </form>\n        </div>;\n    }\n}","import React from 'react';\n\nconst About = function () {\n    return <div className=\"about view pt-20 pb-20\">\n        <h2 className=\"pb-10\">About</h2>\n        <p className=\"pb-5\">A tool to encode subject line with emojis or any special characters.</p>\n        <p className=\"pb-5\">Copy emojis from your favorite emoji site such as: <a className=\"link\" href=\"https://getemoji.com/\">Get Emoji</a> and paste it into the decoded string textfield.</p>\n    </div>;\n}\n\nexport default About;","import React from 'react';\n\nconst Header = function() {\n    return <div className=\"wrapper-header\">\n        <div className=\"header view pb-10 pt-10\">\n            <h1>Subject Line Assistant</h1>\n            <div className=\"logo\">\n                <a href=\"https://github.com/xomrau\">\n                    <img src=\"https://user-images.githubusercontent.com/22007153/87010799-71a01700-c20a-11ea-883c-11efdf0eac39.png\" alt=\"github logo\"/>\n                </a>\n            </div>\n        </div>\n    </div>\n}\n\nexport default Header;","import React from 'react';\n\nconst Footer = function () {\n    return <div className=\"footer view pt-20 pb-20\">\n        <p>Made by <a className=\"link\" href=\"https://github.com/xomrau\">Danny</a> (@xomrau)</p>\n    </div>;\n}\n\nexport default Footer;","// Search Components\nimport React from 'react';\n\nfunction Search(props) {\n    return (<div className=\"form view pt-20\">\n        <form className=\"flex row\">\n            <input type=\"text\" id=\"search\" value={props.input} onChange={props.filterChange} placeholder=\"Search emoji's name...\" />\n        </form>\n    </div>);\n}\n\nexport default Search;","import React from 'react';\n\nfunction EmojiList(props) {\n    let arrayList = '';\n    if (props.activePage === 1) {\n        arrayList = props.items.slice(0, props.activePage * props.itemPerPage);\n    } else {\n        arrayList = props.items.slice(props.itemPerPage * (props.activePage - 1), props.activePage * props.itemPerPage);\n    }\n    if (props.error) {\n        return (<div id=\"error\" className=\"view pb-20 pt-20\">Error: {props.error.message}</div>);\n    } else if (!props.isLoaded) {\n        return (<div id=\"loading\" className=\"view pb-20 pt-20\">Loading Emoji List...!\n            <span role=\"img\" aria-label=\"emoji\"  > &#x23f3;</span>\n        </div>);\n    } else {\n        return (<div className=\"view pb-20 pt-20\" >\n            <ul className=\"flex row\">\n                {arrayList.map(item => (<li onClick={props.itemList} key={item.slug}>{item.character}</li>))}\n            </ul>\n        </div>);\n    }\n}\n\nexport default EmojiList;","//encode the string to utf-8\nconst utf8Encoder = (str) => {\n    return encodeURIComponent(str);\n};\n\nexport default utf8Encoder;","import utf8Encoder from './utf8Encoder';\n\n//format into ready-to-use utf-8-encoded subject line\nconst slEncoder = (str) => {\n    if (str.length === 0) {\n        return '';\n    } else {\n        let [encoding, subjectLine, closing] = ['=?utf-8?Q?', utf8Encoder(str), '?='];\n        const [space, regex] = [/%20/gi, /%/gi];\n        subjectLine = subjectLine.replace(space, '_').replace(regex, '=');\n        return (encoding + subjectLine + closing);\n    }\n};\n\nexport default slEncoder;","// copy text to clipboard\nconst copyClipboard = () => {\n    const copyText = document.getElementById('encode');\n    copyText.select();\n    copyText.setSelectionRange(0, 9999); // for mobile\n    document.execCommand('copy');\n    console.log(`Copied the text: ${copyText.value}`);\n}\n\nexport default copyClipboard;","import React from 'react';\nimport { Pagination } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport './styles/overrideSUI.css'\n\nimport Form from './components/Form';\nimport About from './components/About';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Search from './components/Search';\nimport EmojiList from './components/EmojiList';\n\nimport slEncoder from './logic/slEncoder';\nimport copyClipboard from './logic/copyClipboard';\nimport data from './assets/emojis.json';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numberOfItemPerPage = 30;\n    this.state = {\n      userInput: \"\",\n      value: \"\",\n      filterInput: \"\",\n      isLoaded: false,\n      error: null,\n      items: [],\n      activePage: 1\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleEmojiClick = this.handleEmojiClick.bind(this);\n    this.handlePaginationChange = this.handlePaginationChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n    //console.log(`User input: ${e.target.value} ${typeof this.state.userInput}`);\n  }\n  handleClick(e) {\n    e.preventDefault();\n    this.setState((state) => ({\n      value: slEncoder(state.userInput)\n    }));\n  }\n  handleEmojiClick(e) {\n    const item = e.target.innerText;\n    this.setState((state) => ({\n      userInput: state.userInput + item\n    }));\n    //console.log(`Button click input: ${e.target.innerText} ${typeof e.target.innerText}`);\n  }\n  handlePaginationChange(e, { activePage }) {\n    this.setState({ activePage });\n    //console.log(activePage);\n  }\n  handleFilterChange(e) {\n    this.setState({\n      filterInput: e.target.value.toLowerCase()\n    });\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        items: data,\n        isLoaded: true,\n      });\n    }, 3000);\n  }\n\n  render() {\n    const {\n      value,\n      userInput,\n      isLoaded,\n      items,\n      error,\n      activePage,\n      filterInput\n    } = this.state;\n    let filteredData = items;\n\n    if (filterInput !== '') {\n      filteredData = filteredData.filter(item => item.unicodeName.toLowerCase().includes(filterInput));\n    }\n\n    return <div className=\"flex col\">\n      <Header />\n      <Form change={this.handleChange}\n        submit={this.handleClick}\n        submitValue={value}\n        userInput={userInput}\n        copy={copyClipboard} />\n      <Pagination activePage={activePage}\n        totalPages={Math.ceil(filteredData.length / this.numberOfItemPerPage)}\n        onPageChange={this.handlePaginationChange}\n        disabled={!isLoaded} />\n      <Search filterChange={this.handleFilterChange} />\n      <EmojiList\n        isLoaded={isLoaded}\n        items={filteredData}\n        error={error}\n        itemList={this.handleEmojiClick}\n        activePage={activePage}\n        itemPerPage={this.numberOfItemPerPage}\n        filterInput={filterInput} />\n      <Pagination activePage={activePage}\n        totalPages={Math.ceil(filteredData.length / this.numberOfItemPerPage)}\n        onPageChange={this.handlePaginationChange}\n        disabled={!isLoaded} />\n      <About />\n      {/*<Search filterInput={filterInput}\n        searchOnChange={this.handleFilterChange} />*/}\n      <Footer />\n    </div>;\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}